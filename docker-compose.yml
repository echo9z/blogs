version: "3.8"

# networks:
#   nginx-net: # 一个具体网络的条目名称
#     name: blogs_nework # 网络名称，默认为"工程名称_网络条目名称"
#     driver: bridge # 网络模式，默认为 bridge

# 定义服务，可以多个
services:
  gogs: # 服务名称 http://81.69.254.48:13380 git搭建仓库地址
    image: gogs/gogs # 创建容器时所需的镜像
    container_name: gogs # 容器名称
    restart: always # 容器总是重新启动
    # network_mode: "host" # host 网络模式
    volumes: # 数据卷，目录挂载
      - "/mydata/gogs:/data"
    ports:
      - "18822:22" # git ssh端口
      - "18880:3000" # gogs web页面

  drone:
    image: drone/drone
    container_name: drone
    environment:
      - DRONE_AGENTS_ENABLED:true
      - DRONE_GOGS_SERVER:"http://81.69.254.48:18880" # gogs服务web客户端地址
      - DRONE_RPC_SECRET:dronerpc666 # drone的共享密钥，用于server的rpc连接
      - DRONE_SERVER_HOST:"81.69.254.48:13080" # 用于外部可访问的地址
      - DRONE_SERVER_PROTO:http
      - DRONE_USER_CREATE:"username:echo9z,admin:true"
      - TZ:"Asia/Shanghai"
    ports:
      - "13080:80"
    restart: always
    volumes:
      - "/mydata/drone:/data"
  
  drone-runner-docker:
    image: drone/drone-runner-docker
    container_name: drone-runner-docker
    environment:
      - DRONE_AGENTS_ENABLED:true 
      - DRONE_RPC_PROTO:http
      - DRONE_RPC_HOST:"81.69.254.48:13080"
      - DRONE_RPC_SECRET:dronerpc666 # drone的共享密钥，用于server的rpc连接
      - DRONE_RUNNER_CAPACITY:2
      - DRONE_RUNNER_NAME:drone-runner-docker
      - TZ:"Asia/Shanghai"
    ports:
      - "13080:80"
    restart: always
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"

  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    ports:
      - "120000:8000" # web页面访问端口
      - "20001:9443"
    restart: always
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "portainer_data:/mydata/portainer"
  
  nginx:
    image: nginx:1.21.4
    container_name: nginx
    networks:
      - blogs_nework
    ports:
      - "80:80" # http
      - "443:443" # tls
    restart: always
    volumes:
      - "/mydata/nginx/nginx.conf:/etc/nginx/nginx.conf"
      - "/mydata/nginx/logs:/etc/nginx/logs/nginx"
      - "/mydata/nginx/ssl:/etc/nginx/ssl"
      - "/root/blogs/assets:/root/blogs/assets"

  mysql:
    image: mysql:latest
    container_name: mysql8
    networks:
      - blogs_nework
    ports:
      - "13306:33060"
    restart: always
    environment:
      - MYSQL_ROOT_PASSWORD:wzh123
      - TZ:"Asia/Shanghai"
    volumes:
      - "/mydata/mysql/conf.d:/etc/mysql/conf.d"
      - "/mydata/mysql/data:/var/lib/mysql"
      - "/mydata/mysql/logs:/var/log/mysql"

  redis:
    image: redis:latest
    container_name: redis_blogs
    networks:
      - blogs_nework
    ports:
      - "6379:6379"
    # 配置redis.conf方式启动
    command: redis-server /etc/redis/redis.conf
    # command: redis-server /usr/local/etc/redis/redis.conf --requirepass 123456 --appendonly yes # 设置redis登录密码 123456、--appendonly yes：这个命令是用于开启redis数据持久化
    restart: always
    volumes:
      - "/mydata/redis/data:/data"
      - "/mydata/redis/log:/var/log/redis"
      - "/mydata/redis/conf/redis.conf:/etc/redis/redis.conf"